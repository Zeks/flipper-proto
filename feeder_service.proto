syntax = "proto3";
import "search/fanfic.proto";
import "search/fandom.proto";
import "search/filter.proto";
import "statistics/favlist.proto";
import "recommendations/recommendations.proto";
import "recommendations/diagnostic_recommendations.proto";
import "server_base_structs.proto";

package ProtoSpace;
//option optimize_for = LITE_RUNTIME;

message TagsToken{
    repeated int32 all_tags       = 1;
    repeated int32 searched_tags  = 2;
}

message RecommendationListDataToken
{
    repeated int32 list_of_fics                     = 1;
    repeated int32 list_of_matches                  = 2;
    repeated int32 list_of_pure_votes               = 3;
}

message ScoreListDataToken
{ 
    repeated int32 list_of_fics                     = 1;
    repeated int32 list_of_scores                   = 2;
}



message UserData{
    TagsToken user_tags                              = 1;
    IgnoredFandomsToken ignored_fandoms              = 2; // deprecating
    RecommendationListDataToken recommendation_list  = 3;
    ScoreListDataToken scores_list                   = 4;
    repeated int32 snoozes                           = 5;
    repeated FandomStateToken fandomStateTokens      = 6;
}

message SearchTask
{
    ControlInfo controls    = 1;
    Filter filter           = 2;
    UserData user_data      = 3;
}

message SearchResponse{
    repeated Fanfic fanfics               = 1;
    ResponseInfo response_info            = 2;
}
message SearchByFFNIDTask
{    enum IDType{
        ffn         = 0;
        db          = 1;
    };
    ControlInfo controls    = 1;
    int32 id                = 2;
    IDType id_type          = 3;
}

message SearchByFFNIDResponse{
    bool success                          = 1;
    Fanfic fanfic                         = 2;
    ResponseInfo response_info            = 3;
}


message SyncFandomListTask{
    ControlInfo controls    = 1;
    int32 last_fandom_id    = 2;
}

message SyncFandomListResponse{
    bool needs_update       = 1;
    repeated Fandom fandoms = 2;
    ResponseInfo response_info            = 3;
}

message FicCountTask{
    ControlInfo controls    = 1;
    Filter filter           = 2;
    UserData user_data      = 3;
}

message FicCountResponse{
    int32 fic_count = 1;
    ResponseInfo response_info    = 2;
}


message RecommendationListCreationRequest{
    ControlInfo controls                        = 1;
    RecommendationListRequestData data          = 2;
}

message RecommendationListCreationResponse{
    string list_token           = 1;
    RecommendationListData list = 2;
    ResponseInfo response_info  = 3;
}


message RecommendationListFetchRequest{
    ControlInfo controls                = 1;
    string list_token                   = 2;
}

message RecommendationListFetchResponse{
    bool list_available              = 1;
    bool position_in_queue           = 2;
    RecommendationListData list_data = 3;
    ResponseInfo response_info       = 4;
}

message FicIdRequest{
    ControlInfo controls             = 1;
    SiteIDPack  ids                  = 2;
}

message FicIdResponse{
    bool success        = 1;
    SiteIDPack ids      = 2;
    ResponseInfo response_info        = 3;
}

message StatusRequest{
    ControlInfo controls        = 1;
}

message StatusResponse{
    bool   database_attached          = 1; // for when I need to switch symlinks
    string last_database_update       = 2; // yyyyMMdd hhmm, currently not implemented
    string message_of_the_day         = 3;
    bool need_to_show_motd            = 4;
    int32 protocol_version            = 5; // outdated, will be removed for V3.
    ProtocolVersion  current_protocol = 6;   
}

message FavListDetailsRequest{
    ControlInfo controls             = 1;
    SiteIDPack id_packs              = 2;
}

message FavListDetailsResponse{
    bool success                    = 1;
    FavListDetails details          = 2; 
    ResponseInfo response_info      = 3;
}

message AuthorsForFicsRequest{
    ControlInfo controls             = 1;
    SiteIDPack id_packs              = 2;
}

message AuthorsForFicsResponse{
    bool success                    = 1;
    repeated int32 fics             = 2; 
    repeated int32 authors          = 3; 
    ResponseInfo response_info      = 4;
    
}

message AuthorsForFicInReclistRequest{
    ControlInfo controls             = 1;
    int32 fic_id                     = 2;
    string author_list               = 3;
}

message AuthorsForFicInReclistResponse{
    bool success                    = 1;
    repeated int32 filtered_authors = 2; 
    ResponseInfo response_info      = 3;
}

message UserMatchRequest{
    ControlInfo controls             = 1;
    int32 source_user                = 2;
    repeated int32 user_fics         = 3;
    repeated int32 fandom_ignores    = 4;
    repeated int32 test_users        = 5;
}

message UserMatch{
    int32 user_id                  = 1;
    int32 ratio                    = 2; 
    int32 ratio_without_ignores    = 3;
    repeated int32 fic_id          = 4;
    repeated string fic_title      = 5;
}

message UserMatchResponse{
    bool success                    = 1;
    repeated UserMatch matches      = 2; 
    ResponseInfo response_info      = 3;
}

message SnoozeInfo{
    int32 fic_id                    = 1;
    int32 chapter_added             = 2;
    int32 until_chapter             = 3;
    bool until_finished             = 4;
    bool expired                    = 5;
} 
 
message SnoozeInfoRequest{
    ControlInfo controls            = 1;
    repeated SnoozeInfo snoozes     = 2; 
}

message SnoozeInfoResponse{
    bool success                    = 1;
    repeated int32 expired_snoozes  = 2;
    ResponseInfo response_info      = 3;
}

service Feeder { 
    rpc GetStatus(StatusRequest) returns (StatusResponse) {}
    rpc Search(SearchTask) returns (SearchResponse) {}
    rpc SearchByFFNID(SearchByFFNIDTask) returns (SearchByFFNIDResponse) {}
    rpc GetFicCount(FicCountTask) returns (FicCountResponse) {}
    rpc SyncFandomList(SyncFandomListTask) returns (SyncFandomListResponse) {}
    rpc RecommendationListCreation(RecommendationListCreationRequest) returns (RecommendationListCreationResponse) {}
    rpc DiagnosticRecommendationListCreation(DiagnosticRecommendationListCreationRequest) returns (DiagnosticRecommendationListCreationResponse) {}
    rpc GetDBFicIDS(FicIdRequest) returns (FicIdResponse) {}
    rpc GetFFNFicIDS(FicIdRequest) returns (FicIdResponse) {}
    rpc GetFavListDetails(FavListDetailsRequest) returns (FavListDetailsResponse) {}
    rpc GetAuthorsForFicList(AuthorsForFicsRequest) returns (AuthorsForFicsResponse) {}
    
    // used to fetch favourite lists containing a specific fic from a set of fave lists for a recommendation list
    rpc GetAuthorsFromRecListContainingFic(AuthorsForFicInReclistRequest) returns (AuthorsForFicInReclistResponse) {}
    rpc GetUserMatches(UserMatchRequest) returns (UserMatchResponse) {}
    rpc GetExpiredSnoozes(SnoozeInfoRequest) returns (SnoozeInfoResponse) {}
}

//RecommendationListsFandoms needs to be returned with recommendation list data
 
