/*
Flipper is a replacement search engine for fanfiction.net search results
Copyright (C) 2017-2018  Marchenko Nikolai

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
syntax = "proto3";

package ProtoSpace;
//option optimize_for = LITE_RUNTIME;

// currently slash only
message MatureContentFilterPart{
    bool use_filter                                 = 1;
    bool exclude_content                            = 2;
    bool include_content                            = 3;
    bool show_exact_level                           = 4; 
    bool filter_only_mature                         = 5;
    bool enable_exceptions                          = 6;
                                                    
    int32 filter_level                              = 7;
    repeated int32 fandom_exceptions                = 8; 
}

message MatureContentFilter{
    MatureContentFilterPart slash                   = 1;
    MatureContentFilterPart femslash                = 2;
    MatureContentFilterPart smut                    = 3; 
}

message RecommendationsFilter{
    bool list_open_mode                             = 1;
    bool show_origins_in_lists                      = 2;
    bool display_purged_fics                        = 3;
    
    int32 list_for_recommendations                  = 4;
    int32 use_this_recommender_only                 = 5;
    int32 min_recommendations                       = 6;
}

message BasicFilters{
    string website                  = 1;
    
    int32 min_words                 = 2;
    int32 max_words                 = 3;
    int32 max_fics                  = 4;
    int32 min_favourites            = 5;
   
    bool allow_unfinished           = 6;
    
    bool ensure_completed           = 7;
    bool ensure_active              = 8;
    int32 last_active_days          = 9;
}

message ReviewBias{
    enum ReviewBiasMode{
        bias_none                   = 0;
        bias_favor                  = 1;
        bias_exclude                = 2;
    };                              
    enum BiasOperator{              
        bo_more                     = 0;
        bo_less                     = 1;
    };                              
                                    
    double bias_ratio               = 1;
                                    
    ReviewBiasMode bias_mode        = 2;
    BiasOperator bias_operator      = 3;
}

message RecentAndPopularFilter{
    int32  fav_ratio   = 1;
    string date_cutoff = 2;
}


message ContentMatchFilter
{
    int32 fandom                        = 1; 
    int32 crossover_fandom              = 2;
    
    bool use_ignored_fandoms            = 3;  // deprecating
    bool include_crossovers             = 4;
    bool crossovers_only                = 5;
    bool other_fandoms_mode             = 6;  // deprecating
    

    repeated string word_exclusion      = 7;
    repeated string word_inclusion      = 8;
}

// this is just a placeholder for now
message SubGenreFilter{

}


message GenreFilter{
    enum GenrePresence{
        gp_considerable = 0;
        gp_medium = 1;
        gp_minimal = 2;
        gp_none = 3;
    };
    
    bool allow_no_genre                     = 1;
    bool use_implied_genre                  = 2;
    GenrePresence genre_presence_include    = 3;  
    GenrePresence genre_presence_exclude    = 4;
    
    repeated string genre_exclusion         = 5;
    repeated string genre_inclusion         = 6;
}


// most of the data is passed in "userdata", here it's just a toggle
message TagFilter{
    bool ignore_already_tagged  = 1;
    bool use_and_for_tags       = 2;
    bool tags_are_for_authors   = 3;
    repeated string active_tags = 4;
}

message SizeLimits{
    int32 record_limit                     = 1;
    int32 record_page                      = 2;
}

message Randomizer{
    bool randomize_results                 = 1;
    bool rebuild_random_sequence           = 2;
    string sequence_name                   = 3;  
}

message SourcesFilter{
    repeated int32 authors                 = 1; 
    repeated int32 recommender_ids         = 2;
}

message SnoozeFilter{
    bool display_all                       = 1;
    bool display_expired                   = 2;
}

message FicDateFilter{
    enum FicDateMode{
        mode_none                   = 0;
        mode_start                  = 1;
        mode_end                    = 2;
    };                          
    string fic_date_start                 = 1;
    string fic_date_end                   = 2;
    FicDateMode date_filter_mode          = 3;   
}

message Filter{
    enum EFilterMode{
        filtering_undefined          = 0;
        filtering_in_fics            = 1;
        filtering_in_recommendations = 2;
        filtering_whole_list         = 3;
    };
    
    enum ESortDirection{
    sd_ascending  = 0;
    sd_descending = 1;
    }
    
    enum ESortMode {
    sm_undefined         = 0;
    sm_wordcount         = 1;
    sm_favourites        = 2;
    sm_fav_rate          = 3;
    sm_update_date 	     = 4;
    sm_publish_date      = 5;
    sm_metascore         = 6;
    sm_wcr_cr            = 7;
    sm_rev_to_fav        = 8;
    sm_genre_values      = 9;
    sm_genre_scores      = 10;
    sm_minimize_dislikes = 11;
    sm_gems              = 12;
   }
    enum ERatingFilter{
        rt_t_m        = 0;
        rt_t          = 1;
        rt_m          = 2;
        rt_ma         = 3; // placeholder
    };

    
    
    ESortMode sort_mode                         = 1;
    ESortDirection sort_direction               = 2;
    EFilterMode filtering_mode                  = 3;
    ERatingFilter rating                        = 4;
    
    Randomizer randomizer                       = 5;
    SnoozeFilter snoozes                        = 6;
    SourcesFilter sources                       = 7;
    
    BasicFilters basic_filters                  = 8;
    SizeLimits size_limits                      = 9;
    ReviewBias review_bias                      = 10;
    RecentAndPopularFilter recent_and_popular   = 11;
    ContentMatchFilter content_filter           = 12;
    TagFilter tag_filter                        = 13;
    MatureContentFilter explicit_filter         = 14;
    RecommendationsFilter recommendations       = 15;
    GenreFilter genre_filter                    = 16;
    SubGenreFilter subgenre_filter              = 17;
    FicDateFilter fic_date_filter               = 18;
}
